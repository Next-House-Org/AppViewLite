@using System.Diagnostics
@using System.Runtime.CompilerServices
@code {
    [Parameter] public ReaderWriterLockSlim Lock { get; set; }
    [Parameter] public StrongBox<(StackTrace StackTrace, int ManagedThreadId)>? LastWriterStackTrace { get; set; }

    public int? WriteLockHeldByThreadId => ((int)typeof(ReaderWriterLockSlim).GetField("_writeLockOwnerId", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance)!.GetValue(Lock)!) is { } id && id != -1 ? id : null;
}


WaitingReadCount: @Lock.WaitingReadCount
<br>
WaitingUpgradeCount: @Lock.WaitingUpgradeCount
<br>
WaitingWriteCount: @Lock.WaitingWriteCount
<br>


CurrentReadCount: @Lock.CurrentReadCount
<br>
@{
    var heldByThreadId = WriteLockHeldByThreadId;

}

Write held by thread: @(heldByThreadId?.ToString() ?? "(nobody)")
<br>

@if (LastWriterStackTrace?.Value != null)
{
    <text>Last write stack:</text>
    <br>
    <code style="white-space: pre-wrap;">
    @LastWriterStackTrace.Value.StackTrace.ToString()
    </code>
}
<br>
