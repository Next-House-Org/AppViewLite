@page "/search"
@using System.Text.RegularExpressions
@inject NavigationManager Navigation
@inject RequestContext RequestContext
@inject BlueskyEnrichedApis Apis

@code {
    [Parameter][SupplyParameterFromQuery] public required string Q { get; set; }
    [Parameter][SupplyParameterFromQuery] public required string? From { get; set; }
    [Parameter][SupplyParameterFromQuery] public required DateTime? Since { get; set; }
    [Parameter][SupplyParameterFromQuery] public required DateTime? Until { get; set; }
    [Parameter][SupplyParameterFromQuery] public string? Continuation { get; set; }
    [Parameter][SupplyParameterFromQuery] public required int? MinLikes { get; set; }
    [Parameter][SupplyParameterFromQuery] public required int? MinReposts { get; set; }
    [Parameter][SupplyParameterFromQuery] public required string? Sort { get; set; }
    [Parameter][SupplyParameterFromQuery] public required int? Limit { get; set; }
    [Parameter][SupplyParameterFromQuery] public required string? Language { get; set; }
    [Parameter][SupplyParameterFromQuery] public required string? Kind { get; set; }
    private string? NextContinuation;

    private BlueskyPost[] Posts = [];
    private BlueskyProfile[] Profiles = [];
    private BlueskyFeedGenerator[] Feeds = [];

    public bool IsTopPosts => Sort == "top";

    private Uri GetSearchUrlForKind(string? kind)
    {
        return Navigation.WithQueryParameter("kind", kind).WithQueryParameter("continuation", null);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrEmpty(Kind)) Kind = null;

        if (Q != null && 
            (
                Q.StartsWith("http://", StringComparison.Ordinal) ||
                Q.StartsWith("https://", StringComparison.Ordinal) ||
                Q.StartsWith("at://", StringComparison.Ordinal)))
        {
            Navigation.NavigateTo("/" + Q);
            return; 
        }

        if (Kind == "users")
        {

            if (Q != null && Regex.IsMatch(Q, @"^@?[\w\-]+(?:\.[\w\-]+)+$"))
            {
                string? did = null;
                try
                {
                    did = await Apis.ResolveHandleAsync(Q, RequestContext);
                }
                catch (Exception)
                {
                }
                if (did != null)
                {
                    Navigation.NavigateTo("/@" + did);
                    return;
                }
            }
            (Profiles, NextContinuation) = await Apis.SearchProfilesAsync(Q ?? string.Empty, allowPrefixForLastWord: false, Continuation, default, RequestContext);

        }
        else if (Kind == "feeds")
        {
            if (string.IsNullOrEmpty(Q))
            {
                (Feeds, NextContinuation) = await Apis.GetPopularFeedsAsync(Continuation, default, RequestContext);

            }
            else
            {
                (Feeds, NextContinuation) = await Apis.SearchFeedsAsync(Q, Continuation, default, RequestContext);
            }
        }
        else
        {
            var options = new PostSearchOptions
                {
                    Query = Q,
                    Since = Since,
                    Until = Until,
                    Author = From,
                    MinLikes = MinLikes ?? 0,
                    MinReposts = MinReposts ?? 0,
                    MediaOnly = Kind == "media",
                    Language = Language == "all" || string.IsNullOrEmpty(Language) ? LanguageEnum.Unknown : BlueskyRelationships.ParseLanguage(Language)
                };

            (Posts, NextContinuation) = IsTopPosts ? await Apis.SearchTopPostsAsync(options, RequestContext, limit: Limit.GetValueOrDefault(), Continuation) : await Apis.SearchLatestPostsAsync(options, RequestContext, limit: Limit.GetValueOrDefault(), Continuation);
        }
    }
}

<PageTitle>@(string.IsNullOrEmpty(Q) ? "Search" : Q + " - Search")</PageTitle>
<h1>Search</h1>

<form action="/search" method="get" class="search-form">
    @if (Kind != null)
    {
        <input type="hidden" name="kind" value="@Kind" />
    }
    <label class="search-form-query"><input type="search" name="q" value="@Q" id="search-box" autofocus placeholder="Search" autocomplete="off" oninput="searchBoxAutocomplete()" onclick="searchBoxAutocomplete()" /></label>
    <label class="search-form-submit"><input type="submit" value="Search"></label>




    @*     <div class="search-form-row">
        <label>Author: <input type="text" name="from" value="@From" /></label>
        <label>
            <select name="language">
                @foreach (var lang in Enum.GetNames<LanguageEnum>().Where(x => x != "pt_BR" && x != "pt_PT").Select(x =>
                {
                   if (x == "Unknown") return (Code: "all", DisplayName: "All languages");
                   var code = x.Replace('_', '-');
                   var displayName = System.Globalization.CultureInfo.GetCultureInfo(code)?.DisplayName ?? code;
                   return (Code: code, DisplayName: displayName);
                }).OrderByDescending(x => x.Code == "all").ThenBy(x => x.DisplayName, StringComparer.InvariantCultureIgnoreCase))
                {
                    <option value="@lang.Code" selected="@(Language == lang.Code)">@lang.DisplayName</option>
                }
            </select>
        </label>
    </div>
    <div class="search-form-row">
        <label>Since: <input type="date" name="since" value="@Since?.ToString("yyyy-MM-dd")" /></label>
        <label>Until: <input type="date" name="until" value="@Until?.ToString("yyyy-MM-dd")" /></label>
    </div>
    <div class="search-form-row">
        <label>Minimum likes: <input type="number" min="0" max="1000000000" name="minLikes" value="@MinLikes" /></label>
        <label>Minimum reposts: <input type="number" min="0" max="1000000000" name="minReposts" value="@MinReposts" /></label>
    </div> *@
    @if (Kind == null)
    {
        <div class="search-form-row">

            <label>
                <select name="sort" onchange="this.form.submit()">
                    <option value="latest">Most recent</option>
                    <option value="top" selected="@IsTopPosts">Top posts</option>
                </select>
            </label>
        </div>
    }
    <div class="search-form-suggestions display-none">
        <a href="/">Test</a>
    </div>
</form>

<div class="tabbed-lists-header">
    <div class="tabbed-lists-header-inner">
        <a draggable="false" href="@GetSearchUrlForKind(null)" class="@(Kind == null ? "active" : null)">Posts</a>
        <a draggable="false" href="@GetSearchUrlForKind("media")" class="@(Kind == "media" ? "active" : null)">Media</a>
        <a draggable="false" href="@GetSearchUrlForKind("users")" class="@(Kind == "users" ? "active" : null)">People</a>
        <a draggable="false" href="@GetSearchUrlForKind("feeds")" class="@(Kind == "feeds" ? "active" : null)">Feeds</a>
    </div>
</div>


@if (Kind == "users")
{
    <ProfileList Profiles="@Profiles" NextContinuation="@NextContinuation" />
}
else if(Kind == "feeds")
{
    <FeedList Feeds="@Feeds" NextContinuation="@NextContinuation" />
}
else if(Kind == "media")
{
    <PostList Posts="@Posts" NextContinuation="@NextContinuation" ShowAsGrid="true" />
}
else
{
    <PostList Posts="@Posts" NextContinuation="@NextContinuation" />
}
