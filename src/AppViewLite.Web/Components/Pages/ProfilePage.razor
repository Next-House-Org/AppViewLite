@page "/@{did}"
@inject RequestContext RequestContext
@inject BlueskyEnrichedApis Apis

@code {
    [Parameter][SupplyParameterFromQuery] public int? Replies { get; set; }
    [Parameter][SupplyParameterFromQuery] public int? Reposts { get; set; }
    [Parameter][SupplyParameterFromQuery] public int? Likes { get; set; }
    [Parameter][SupplyParameterFromQuery] public int? Media { get; set; }

    [Parameter] public string Did { get; set; }
    [Parameter][SupplyParameterFromQuery] public string? Continuation { get; set; }
    private string? NextContinuation;
    private FacetData[]? GuessedFacets;

    public bool ShowMediaOnly => (Media ?? 0) != 0;
    public bool ShowLikes => (Likes ?? 0) != 0;
    public bool ShowReplies => !ShowLikes && (Replies ?? (ShowMediaOnly ? 1 : 0)) != 0;
    public bool ShowReposts => !ShowLikes && (Reposts ?? (ShowReplies || ShowMediaOnly ? 0 : 1)) != 0;


    // [Parameter] public string? DidUnprefixed { get; set; }
    // public string? Did => DidUnprefixed != null ? "did:" + DidUnprefixed : null;
    private BlueskyFullProfile? Profile;
    private BlueskyPost[] Posts = [];
    const int MaxFollowersYouFollowNames = 3; // A, B and C    *or*   A, B and 2 others
    const int MaxFollowersYouFollowAvatars = 3;
    private BlueskyProfileBasicInfo? data;
    private AppViewLite.PluggableProtocols.PluggableProtocol? pluggable;
    private string? pluggableExternalUrl;
    private string? anchorTargetForProfileUrl;
    protected override async Task OnParametersSetAsync()
    {
        Did = (await Apis.ResolveHandleAsync(Did));
        Profile = await Apis.GetFullProfileAsync(Did, RequestContext, Math.Max(MaxFollowersYouFollowNames, MaxFollowersYouFollowAvatars));
        data = Profile.Profile?.BasicData;
        pluggable = BlueskyRelationships.TryGetPluggableProtocolForDid(Did);
        pluggableExternalUrl = pluggable?.TryGetOriginalProfileUrl(Did);
        anchorTargetForProfileUrl = pluggableExternalUrl != null ? "_blank" : null;
        GuessedFacets =
            data?.HasExplicitFacets == true ? data.DescriptionFacets :
            StringUtils.GuessFacets(data?.Description);
        (Posts, NextContinuation) = await Apis.GetUserPostsAsync(
            Did,
            includePosts: !ShowLikes,
            includeReplies: ShowReplies,
            includeReposts: ShowReposts,
            includeLikes: ShowLikes,
            mediaOnly: ShowMediaOnly,
            continuation: Continuation,
            ctx: RequestContext);
    }
}

<PageTitle>@Profile?.Profile.DisplayNameOrFallback</PageTitle>


@if (Profile != null)
{
    <div class="profile-page @(Profile.Profile.BlockReason != default ? "profile-page-blocked" : null)">
        <div class="profile-banner @(Profile.Profile.HasBannerImage ? null : "profile-banner-no-image")">
            @if (Profile.Profile.HasBannerImage)
            {
                <img src="@Apis.GetImageBannerUrl(Did, Profile.Profile.BasicData!.BannerCidBytes!, Profile.Profile.Pds)" />
            }
        </div>
        <img src="@Profile.Profile.AvatarUrl" class="profile-image-large main-padding" />
        <h1 class="main-padding">
            <TextWithFacets Text="@Profile.Profile.DisplayNameOrFallback" Facets="@Profile.Profile.BasicData?.DisplayNameFacets"></TextWithFacets>
            <ProfileBadges Profile="@Profile.Profile" />
        </h1>

        <div class="main-padding">
            <ProfileHandle Profile="@Profile.Profile" />
        </div>

        @if (RequestContext.IsLoggedIn && Profile.Profile.Plc != RequestContext.LoggedInUser)
        {
            <FollowButton Profile="@Profile.Profile" />
        }

        @if (Profile.Profile.BlockReason != default || Profile.Profile.FollowsYou || Profile.Profile.IsFollowedBySelf != null)
        {
            <span class="profile-follow-relationship main-padding">@(Profile.Profile.BlockReason.ToDisplayString(BlockSubjects.YouAndAuthor) ?? (Profile.Profile.FollowsYou && Profile.Profile.IsFollowedBySelf != null ? "Mutuals" : (Profile.Profile.FollowsYou ? "Follows you" : "Following")))</span>
        }

        <div class="profile-follow-links main-padding">
            <a href="@(pluggable != null ? pluggableExternalUrl : Profile.Profile.BaseUrl + "/following")" target="@anchorTargetForProfileUrl" class="underline-on-hover">@data?.PluggableProtocolFollowingCount Following</a> ·
            <a href="@(pluggable != null ? pluggableExternalUrl : Profile.Profile.BaseUrl + "/followers")" target="@anchorTargetForProfileUrl" class="underline-on-hover">@data?.PluggableProtocolFollowerCount Followers</a>
            @if (RequestContext.IsLoggedIn && RequestContext.LoggedInUser == Profile.Profile.Plc)
            {
                <text> ·</text>
                <a href = "@Profile.Profile.BaseUrl/known-followers" class="underline-on-hover">Mutuals</a>
            }
        </div>

        <div class="profile-description main-padding">
            <TextWithFacets Text="@Profile.Profile.BasicData?.Description" Facets="@GuessedFacets" />
        </div>

        @if (Profile.FollowedByPeopleYouFollow != null && Profile.FollowedByPeopleYouFollow.Count != 0 && RequestContext.LoggedInUser != Profile.Profile.Plc)
        {
            var knownFollowerCount = Profile.FollowedByPeopleYouFollow.Count;
            <a class="profile-followers-you-follow main-padding" href="@Profile.Profile.BaseUrl/known-followers">
                <span class="profile-followers-you-follow-avatars">
                    @foreach (var user in Profile.FollowedByPeopleYouFollow.Take(MaxFollowersYouFollowAvatars).Index())
                    {
                        <div class="profile-followers-you-follow-avatar" style="z-index: @(-user.Index);">
                            <img src="@user.Item.AvatarUrl" class="profile-image-small">
                        </div>
                    }
                </span>
                <span class="profile-followers-you-follow-text">
                    Followed by @(
                knownFollowerCount <= MaxFollowersYouFollowNames 
            ? StringUtils.AndJoin(Profile.FollowedByPeopleYouFollow.Select(x => x.DisplayNameOrFallback).ToArray())
            : (StringUtils.AndJoin(Profile.FollowedByPeopleYouFollow.Take(MaxFollowersYouFollowNames - 1).Select(x => x.DisplayNameOrFallback).ToArray()) + " and " + (knownFollowerCount - (MaxFollowersYouFollowNames - 1)) + " others")
            )
                </span>
            </a>
        }


        <LabelBadges Labels="@Profile.Profile.Labels" ExtraClass="profile-labels main-padding" />

        <div class="tabbed-lists-header">
            <div class="tabbed-lists-header-inner">

                <NavLink Match="NavLinkMatch.All" href="@Profile.Profile.BaseUrl">Posts</NavLink>
                <NavLink Match="NavLinkMatch.All" href="@(Profile.Profile.BaseUrl + "?replies=1")">Replies</NavLink>
                <NavLink Match="NavLinkMatch.All" href="@(Profile.Profile.BaseUrl + "?media=1")">Media</NavLink>
                <NavLink Match="NavLinkMatch.All" href="@(Profile.Profile.BaseUrl + "?reposts=0&replies=0")">Original posts</NavLink>
                <NavLink Match="NavLinkMatch.All" href="@(Profile.Profile.BaseUrl + "?likes=1")">Likes</NavLink>
                @if (Profile.HasFeeds)
                {
                    <NavLink Match="NavLinkMatch.All" href="@(Profile.Profile.BaseUrl + "/feeds")">Feeds</NavLink>
                }
                @if (Profile.HasLists)
                {
                    <NavLink Match="NavLinkMatch.All" href="@(Profile.Profile.BaseUrl + "/lists")">Lists</NavLink>
                }

                @* <a class="bsky-link" href="@Profile.Profile.BlueskyUrl" title="View on bsky.app" target="_blank"><img src="/assets/bluesky.png"></a> *@
                <a class="search-link" href="/search?q= from:@Did" title="Search"><img src="/assets/search.png"></a>
            </div>
        </div>

        @if (pluggableExternalUrl != null)
        {
            <div class="profile-link-to-full-profile">
                <a href="@pluggableExternalUrl" target="_blank">See full profile on @(new Uri(pluggableExternalUrl).Host)</a>
            </div>
        }
        <PostList Posts="@Posts" NextContinuation="@NextContinuation" />
    </div>
}

