@page "/compose"
@inject RequestContext RequestContext
@inject NavigationManager Navigation
@inject IHttpContextAccessor HttpContextAccessor
@inject BlueskyEnrichedApis Apis

@code {
    [SupplyParameterFromQuery][Parameter] public string? ReplyDid { get; set; }
    [SupplyParameterFromQuery][Parameter] public string? ReplyRkey { get; set; }
    [SupplyParameterFromQuery][Parameter] public string? QuoteDid { get; set; }
    [SupplyParameterFromQuery][Parameter] public string? QuoteRkey { get; set; }
    [SupplyParameterFromQuery][Parameter] public string? Text { get; set; }

    public bool IsReply => ReplyRkey != null && ReplyDid != null;
    public bool IsQuote => QuoteRkey != null && QuoteDid != null;

    [SupplyParameterFromForm]
    private ComposePostData? Model { get; set; }

    protected override void OnInitialized()
    {
        if (!RequestContext.IsLoggedIn) Navigation.NavigateTo("/login", true);
        Model ??= new();
    }

    private BlueskyPost? ReplyToPost;
    private BlueskyPost? QuotedPost;

    protected override async Task OnParametersSetAsync()
    {
        ReplyToPost = IsReply ? await Apis.GetPostAsync(ReplyDid!, ReplyRkey!, RequestContext) : null;
        QuotedPost = IsQuote ? await Apis.GetPostAsync(QuoteDid!, QuoteRkey!, RequestContext) : null;

        if (!string.IsNullOrEmpty(Text) && string.IsNullOrEmpty(Model!.Text))
        {
            Model!.Text = Text;    
        }

        if (IsQuote && BlueskyRelationships.TryGetPluggableProtocolForDid(QuoteDid!) != null)
        {
            Model!.Text += PostToInlineQuote(QuotedPost!) + "\n";
            QuotedPost = null;
        }
        if (IsReply && BlueskyRelationships.TryGetPluggableProtocolForDid(ReplyDid!) != null)
        {
            Model!.Text += PostToInlineQuote(ReplyToPost!) + "\n";
            ReplyToPost = null;
        }

        
    }

    private static string PostToInlineQuote(BlueskyPost post)
    {
        return string.Join(null, post.Data?.Text?.Split('\n').Select(x => "> " + x + "\n") ?? []) + (post.OriginalPostUrl != null ? post.OriginalPostUrl + "\n" : null);

    }

    private async Task Submit()
    {
        if (!string.IsNullOrWhiteSpace(Model!.Text))
        {
            var rkey = await Apis.CreatePostAsync(Model.Text,
                inReplyTo: IsReply && BlueskyRelationships.TryGetPluggableProtocolForDid(ReplyDid!) == null ? new PostIdString(ReplyDid!, ReplyRkey!) : null, 
                quotedPost: IsQuote && BlueskyRelationships.TryGetPluggableProtocolForDid(QuoteDid!) == null ? new PostIdString(QuoteDid!, QuoteRkey!) : null,
                RequestContext);
            Navigation.NavigateTo(RequestContext.Session.Profile.BaseUrl + "/" + rkey, true);
        }
    }

    public class ComposePostData
    {
        public string? Text { get; set; }
    }
}

@if (IsReply)
{
    <PageTitle>Reply</PageTitle>
    <br>
}
else
{
    <PageTitle>New post</PageTitle>
    <h1>New post</h1>
}

@if (ReplyToPost != null)
{
    <PostRow Post="ReplyToPost"/>
    <br>
}

<form method="post" @onsubmit="Submit" @formname="composeForm" class="main-padding compose-form">
    <AntiforgeryToken />
    <div>
        <InputTextArea @bind-Value="Model!.Text" oninput="composeTextAreaChanged()" class="compose-textarea" placeholder="@(IsReply ? "Write your reply" : "What's up?")" autofocus />
        <div class="compose-textarea-limit-container">
            <div class="compose-textarea-limit">
            </div>
        </div>
    </div>
    <br>
    <div class="compose-submit-container">
        <button class="compose-submit" type="submit">@(IsReply ? "Reply" : "Post")</button>
        @if (ReplyToPost != null || QuotedPost != null)
        {
            <a href="@((ReplyToPost ?? QuotedPost).BaseUrl)" class="compose-cancel-button">Cancel</a>
        }
    </div>
</form>

@if (QuotedPost != null)
{
    <ul class="post-quoted compose-quoted-post">
        <PostRow Post="QuotedPost" IsQuote="true" />
    </ul>
        

}
