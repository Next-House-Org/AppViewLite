@page "/compose"
@inject RequestContext RequestContext
@inject NavigationManager Navigation
@inject IHttpContextAccessor HttpContextAccessor

@code {
    [SupplyParameterFromQuery] [Parameter] public string? ReplyDid { get; set; }
    [SupplyParameterFromQuery] [Parameter] public string? ReplyRkey { get; set; }

    public bool IsReply => ReplyRkey != null && ReplyDid != null;

    [SupplyParameterFromForm]
    private ComposePostData? Model { get; set; }

    protected override void OnInitialized()
    {
        if (!RequestContext.IsLoggedIn) Navigation.NavigateTo("/login", true);
        Model ??= new();
    }

    private BlueskyPost? ReplyToPost;

    protected override async Task OnParametersSetAsync()
    {
        ReplyToPost = IsReply ? await BlueskyEnrichedApis.Instance.GetPostAsync(ReplyDid!, ReplyRkey!, RequestContext) : null;
    }

    private async Task Submit()
    {
        if (!string.IsNullOrWhiteSpace(Model!.Text))
        {
            var rkey = await BlueskyEnrichedApis.Instance.CreatePostAsync(Model.Text, IsReply ? new PostIdString(ReplyDid!, ReplyRkey!) : null, RequestContext);
            Navigation.NavigateTo(RequestContext.Session.Profile.BaseUrl + "/" + rkey, true);
        }
    }

    public class ComposePostData
    {
        public string? Text { get; set; }
    }
}

@if (IsReply)
{
    <PageTitle>Reply</PageTitle>
    <br>
}
else
{
    <PageTitle>New post</PageTitle>
    <h1>New post</h1>
}

@if (ReplyToPost != null)
{
    <PostRow Post="ReplyToPost"/>
}

<form method="post" @onsubmit="Submit" @formname="composeForm" class="main-padding compose-form">
    <AntiforgeryToken />
    <div>
        <InputTextArea @bind-Value="Model!.Text" class="compose-textarea" />
    </div>
    <br>
    <div>
        <button type="submit">@(IsReply ? "Reply" : "Post")</button>
    </div>
</form>

