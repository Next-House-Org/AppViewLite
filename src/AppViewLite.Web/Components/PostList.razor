@using Microsoft.AspNetCore.Mvc.Routing
@using Microsoft.AspNetCore.WebUtilities
@inject NavigationManager Navigation
@inject BlueskyEnrichedApis Apis
@inject RequestContext RequestContext

@code {
    [Parameter] public required BlueskyPost[] Posts { get; set; }
    [Parameter] public bool ShowInReplyTo { get; set; } = true;
    [Parameter] public string? FocalPostDid { get; set; }
    [Parameter] public string? FocalPostRKey { get; set; }
    [Parameter] public string? NextContinuation { get; set; }
    [Parameter] public bool IsQuoteList { get; set; }
    [Parameter] public bool ShowAsGrid { get; set; }
    [Parameter] public bool FocalVideoAutoPlay { get; set; }

    private Uri? continuationUrl;
    private Plc? focalPostPlc;

    protected override void OnParametersSet()
    {
        continuationUrl = Navigation.GetNextContinuationUrl(NextContinuation);
        focalPostPlc = FocalPostDid != null ? Apis.WithRelationshipsLock(rels => rels.SerializeDid(FocalPostDid), RequestContext) : null;
    }

    static bool IsLastOfGroup(BlueskyPost post, BlueskyPost? next)
    {
        if (next == null) return true;
        return next?.Data?.InReplyToPostId != post.PostId && next?.Data?.RootPostId != post.PostId;
    }

}

<ul class="post-list main-paginated-list @(ShowAsGrid ? "image-grid" : null)" data-focalpostdid="@FocalPostDid">
    @for (int i = 0; i < Posts.Length; i++)
    {
        var post = Posts[i];
        @if (ShowAsGrid)
        {
            @foreach (var (index, media) in (post.Data?.Media ?? []).Index())
            {
                var preverExternalLink = post.Did.StartsWith("did:yotsuba:", StringComparison.Ordinal);

                var thumbUrl = media.IsVideo ? Apis.GetVideoThumbnailUrl(post.Did, media.Cid, post.Author.Pds) : Apis.GetImageThumbnailUrl(post.Did, media.Cid, post.Author.Pds);
                var linkUrl =
                    preverExternalLink ? post.OriginalPostUrl :
                    media.IsVideo ? post.BaseUrl :
                    post.BaseUrl + (thumbUrl != null ? "/media/" + (index + 1) : null);
                <li class="image-grid-cell @(media.IsVideo ? "image-grid-cell-video" : null)" data-postdid="@post.Did" data-postrkey="@post.RKey">
                    <a class="image-grid-cell-link" href="@linkUrl" target="@(preverExternalLink ? "_blank" : null)" rel="noreferrer" title="@((post.Data!.Text + "\n\n" + (media.AltText != null ? "Image description:\n" + media.AltText : null)).Trim())">
                        <img src="@thumbUrl" class="image-grid-cell-image" />
                    </a>
                </li>

            }

        }
        else
        {
            var prev = i != 0 ? Posts[i - 1] : null;
            var next = i != Posts.Length - 1 ? Posts[i + 1] : null;
            var postId = post.PostId;
            var isFocalPost = post.Author.Did == FocalPostDid && post.RKey == FocalPostRKey;
            <PostRow 
                Post="post"
                ShowThreadLine="@(
                    (prev?.PostId == post.InReplyToPostId) ||
                    (prev?.PostId == post.RootPostId && post.IsNativeReply) || 
                    (postId == next?.RootPostId) ||
                    (postId == next?.InReplyToPostId))"
                ShowInReplyTo="@(
                    (ShowInReplyTo && (prev?.RootPostId != post.RootPostId && prev?.PostId.Author != postId.Author)) || 
                    (post.IsNativeReply && ((prev == null || (IsLastOfGroup(prev, post) && post.InReplyToPostId!.Value.Author != focalPostPlc)))))"
                IsLastOfGroup="@IsLastOfGroup(post, next)"
                ShowRestOfThreadLink="@(prev?.PostId == post.RootPostId && prev.PostId != post.InReplyToPostId)"
                IsFocalPost="@isFocalPost" 
                IsThreadView="@(focalPostPlc != null)"
                IsQuoteList="@IsQuoteList"
                VideoAutoPlay="@(FocalVideoAutoPlay && isFocalPost)" />
        }
    }
</ul>

@if (continuationUrl != null)
{
    
    <div class="pagination-button">
        <a href="@continuationUrl">Next</a>
    </div>
}
