@using System.Text.RegularExpressions
@inject BlueskyEnrichedApis Apis
@inject RequestContext RequestContext

@code {
    [Parameter] public string? Text { get; set; }
    [Parameter] public FacetData[]? Facets { get; set; }
    [Parameter] public bool IsProfileDisplayName { get; set; }

    private List<(string Text, string? Link, CustomEmoji? CustomEmoji, bool Bold, bool Del)> Parts = null!;
    private bool HasLinks;

    private void AddPart(string text, string? link, CustomEmoji? customEmoji, bool bold, bool del)
    {

        if (link != null)
        {
            if (Uri.TryCreate(link, UriKind.Absolute, out var url) && (url.Scheme == Uri.UriSchemeHttp || url.Scheme == Uri.UriSchemeHttps))
            {
                var urlNoTrackingParams = Program.RemoveTrackingParameters(url);
                link = urlNoTrackingParams.AbsoluteUri;
                if (
                    string.Equals(text, url.AbsoluteUri, StringComparison.InvariantCultureIgnoreCase) ||
                    string.Equals(text, url.ToString(), StringComparison.InvariantCultureIgnoreCase))
                {

                    text = StringUtils.GetDisplayUrl(urlNoTrackingParams);
                }

            }
        }
        Parts.Add((text, link, customEmoji, bold, del));
    }

    private void AddPart(ReadOnlySpan<byte> utf8, string? link, CustomEmoji? customEmoji, bool bold, bool del)
    {
        AddPart(System.Text.Encoding.UTF8.GetString(utf8), link, customEmoji, bold, del);
    }

    protected override void OnParametersSet()
    {
        HasLinks = false;
        if (string.IsNullOrEmpty(Text))
        {
            Parts = [];
            return;
        }


        if (Facets == null && !Text.Contains('#'))
        {
            Parts = [(Text, null, null, false, false)];
            return;
        }

        var textBytes = System.Text.Encoding.UTF8.GetBytes(Text);
        Parts = [];
        var facets = Facets ?? [];
        if (!IsProfileDisplayName && textBytes.Contains((byte)'#'))
        {
            facets = facets.Concat(StringUtils.GuessHashtagFacets(Text).Where(x => facets.All(y => y.IsDisjoint(x)))).ToArray();
        }
        facets = facets.OrderBy(x => x.Start).ToArray();

        var processedText = 0;
        for (int i = 0; i < facets.Length; i++)
        {
            var facet = facets[i];
            if(facet.Start < processedText || facet.End > textBytes.Length) continue;

            var textBetween = textBytes.AsSpan(processedText, facet.Start - processedText);
            if (textBetween.Length != 0)
                AddPart(textBetween, null, null, false, false);

            CustomEmoji? customEmojiUrl = null;
            string? link = null;
            if (facet.CustomEmojiHashHi != null)
            {
                customEmojiUrl = Apis.TryGetCustomEmoji(facet.CustomEmojiHash!.Value, RequestContext);
            }
            else 
            {
                if (facet.Did != null)
                {
                    if (facet.Did != null && facet.Did.StartsWith(AppViewLite.PluggableProtocols.ActivityPub.ActivityPubProtocol.DidPrefix))
                    {
                        link = "/" + AppViewLite.PluggableProtocols.ActivityPub.ActivityPubProtocol.ParseDid(facet.Did).ToString();
                    }
                    else
                    {
                        link = "/@" + facet.Did;
                    }

                }
                else
                {
                    link = facet.GetLink(textBytes);
                }

                if (link != null && link.StartsWith("https://bsky.app/"))
                {
                    var url = new Uri(link);
                    var segments = url.AbsolutePath.Split('/').Where(x => x.Length != 0).ToArray();
                    if (segments.Length >= 2 && segments[0] == "profile")
                    {
                        var profileBaseUrl = link = "/@" + segments[1];
                        if (segments.Length == 4)
                        {
                            var collection = segments[2];
                            var rkey = segments[3];
                            if (collection == "post")
                            {
                                link = profileBaseUrl + "/" + rkey;
                            }
                        }
                        else if (segments.Length == 2)
                        {
                            link = profileBaseUrl;
                        }


                    }
                }

                if (link != null && link.Contains("/@") && AppViewLite.PluggableProtocols.PluggableProtocol.RegisteredPluggableProtocols.Any(x => x is AppViewLite.PluggableProtocols.ActivityPub.ActivityPubProtocol))
                {
                    var linkedText = System.Text.Encoding.UTF8.GetString(textBytes.AsSpan(facet.Start, facet.Length));
                    if (Regex.IsMatch(linkedText, @"^@[\w\-\.]+@[\w\-\.]+$"))
                    {
                        var userId = AppViewLite.PluggableProtocols.ActivityPub.ActivityPubUserId.Parse(linkedText).Normalize();
                        link = "/@did:fedi:" + userId.Instance + ":" + userId.UserName;
                    }
                }

            }
            if (facet.Did != null && BlueskyRelationships.TryGetPluggableProtocolForDid(facet.Did) is { } pluggable && pluggable.TryGetHandleFromDid(facet.Did) is {} handle)
            {
                if (!handle.StartsWith('@')) handle = "@" + handle;
                AddPart(handle, link, null, false, false);
            }
            else
            {
                AddPart(textBytes.AsSpan(facet.Start, facet.Length), link, customEmojiUrl, facet.Bold ?? false, facet.Del ?? false);
            }
            processedText = facet.End;
        }

        var rest = textBytes.AsSpan(processedText);
        if (rest.Length != 0)
            AddPart(rest, null, null, false, false);
        HasLinks = Parts.Any(x => x.Link != null);

    }
}

@foreach (var part in Parts)
{
    if (part.Link != null)
    {
        <a href="@part.Link" target="@(part.Link[0] != '/' ? "_blank" : null)" class="blue-link" rel="noreferrer nofollow">@part.Text</a>
    }
    else if (part.Del)
    {
        <del>@part.Text</del>
    }
    else if (part.Bold)
    {
        <b>@part.Text</b>
    }
    else if(part.CustomEmoji != null)
    {
        <img src="@Apis.GetCustomEmojiUrl(part.CustomEmoji, IsProfileDisplayName ? ThumbnailSize.emoji_profile_name : ThumbnailSize.emoji)" class="custom-emoji" alt="@(IsProfileDisplayName ? " " : part.Text.Replace(":", null))" rel="noreferrer">
    }
    else
    {
        @part.Text
    }
}

